package com.zakiis.rpc.netty;

import io.netty.channel.Channel;
import io.netty.channel.ServerChannel;
import io.netty.channel.epoll.Epoll;
import io.netty.channel.socket.nio.NioServerSocketChannel;
import io.netty.channel.socket.nio.NioSocketChannel;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class NettyServerConfig implements Cloneable {
	
	public static final int SERVICE_DEFAULT_PORT = 8021;
	public static final Class<? extends ServerChannel> SERVER_CHANNEL_CLAZZ = NioServerSocketChannel.class;
	public static final Class<? extends Channel> CLIENT_CHANNEL_CLAZZ = NioSocketChannel.class;
	public static final int MAX_WRITE_IDLE_SECONDS;
	public static final int MAX_READ_IDLE_SECONDS;
	
    private static final int DEFAULT_WRITE_IDLE_SECONDS = 5;
    private static final int READIDLE_BASE_WRITEIDLE = 3;
    protected static final int MAX_ALL_IDLE_SECONDS = 0;
    private static final int DEFAULT_SHUTDOWN_TIMEOUT_SEC = 3;

	private int listenPort = SERVICE_DEFAULT_PORT;
    private int serverWorkerThreads = 8;
    private int serverCallbackExecutorThreads = 0;
    private int serverSelectorThreads = 3;
    private int serverOnewaySemaphoreValue = 256;
    private int serverAsyncSemaphoreValue = 64;
    private int serverChannelMaxIdleTimeSeconds = 120;

    private int serverSocketSndBufSize = 0;
    private int serverSocketRcvBufSize = 0;
    private int writeBufferHighWaterMark = 0;
    private int writeBufferLowWaterMark = 0;
    private int serverSocketBacklog = 1024;
    private boolean serverPooledByteBufAllocatorEnable = true;
    
    private String bossThreadPrefix = "NettyBoss";
    private int bossThreadSize = 1; 
    private String workerThreadPrefix = "NettyServerNIOWorker";
    private boolean enableHeartbeat = true;
    private int serverShutdownWaitTime = DEFAULT_SHUTDOWN_TIMEOUT_SEC;
    
    static {
    	MAX_WRITE_IDLE_SECONDS = DEFAULT_WRITE_IDLE_SECONDS;
        MAX_READ_IDLE_SECONDS = MAX_WRITE_IDLE_SECONDS * READIDLE_BASE_WRITEIDLE;
    }
    
    public static boolean enableEpoll() {
        return Epoll.isAvailable();
    }
}
